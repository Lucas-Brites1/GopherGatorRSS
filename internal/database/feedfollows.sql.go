// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feedfollows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO Feed_Follows (ID, user_id, feed_id, created_at, updated_at)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5
)
RETURNING id, user_id, feed_id, created_at, updated_at
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	UserID    uuid.NullUUID
	FeedID    uuid.NullUUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT 
  U.name AS user_name,
  Fe.name AS feed_name,
  Fe.url AS feed_url
FROM 
  Feed_Follows as F
INNER JOIN
  Users AS U ON F.user_id = U.ID
INNER JOIN 
  Feeds AS Fe ON F.feed_id = Fe.ID
WHERE
  U.ID = $1
`

type GetFeedFollowsForUserRow struct {
	UserName string
	FeedName string
	FeedUrl  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, id uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.UserName, &i.FeedName, &i.FeedUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollow = `-- name: Unfollow :exec
DELETE FROM Feed_Follows 
WHERE feed_id = (SELECT ID FROM Feeds WHERE url = $1 LIMIT 1)
AND Feed_Follows.user_id = $2
`

type UnfollowParams struct {
	Url    string
	UserID uuid.NullUUID
}

func (q *Queries) Unfollow(ctx context.Context, arg UnfollowParams) error {
	_, err := q.db.ExecContext(ctx, unfollow, arg.Url, arg.UserID)
	return err
}
