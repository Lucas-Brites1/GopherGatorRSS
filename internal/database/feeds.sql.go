// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO Feeds (ID, user_id, name, url, created_at, updated_at)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id, user_id, name, url, created_at, updated_at, last_fetched_at
`

type CreateFeedParams struct {
	ID        uuid.UUID
	UserID    uuid.NullUUID
	Name      string
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Url,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeedById = `-- name: GetFeedById :one
SELECT name FROM Feeds
WHERE ID = $1
LIMIT 1
`

func (q *Queries) GetFeedById(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getFeedById, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getFeedByURL = `-- name: GetFeedByURL :one
SELECT id, user_id, name, url, created_at, updated_at, last_fetched_at FROM Feeds
WHERE url = $1
`

func (q *Queries) GetFeedByURL(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT id, user_id, name, url, created_at, updated_at, last_fetched_at FROM Feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdByURL = `-- name: GetIdByURL :one
SELECT ID FROM Feeds
WHERE url = $1
LIMIT 1
`

func (q *Queries) GetIdByURL(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getIdByURL, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT ID, name, url, last_fetched_at
FROM Feeds
ORDER BY last_fetched_at NULLS FIRST, updated_at ASC
LIMIT 1
`

type GetNextFeedToFetchRow struct {
	ID            uuid.UUID
	Name          string
	Url           string
	LastFetchedAt sql.NullTime
}

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (GetNextFeedToFetchRow, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i GetNextFeedToFetchRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.LastFetchedAt,
	)
	return i, err
}

const markFeedFetch = `-- name: MarkFeedFetch :exec
UPDATE Feeds
SET 
  last_fetched_at = CURRENT_TIMESTAMP,
  updated_at = CURRENT_TIMESTAMP
WHERE ID = $1
`

func (q *Queries) MarkFeedFetch(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markFeedFetch, id)
	return err
}
