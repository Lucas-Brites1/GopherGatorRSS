// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO Posts(ID, title, description, url, feed_id, published_at, created_at, updated_at)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8
)
RETURNING id, title, description, url, published_at, feed_id, created_at, updated_at
`

type CreatePostParams struct {
	ID          uuid.UUID
	Title       sql.NullString
	Description sql.NullString
	Url         sql.NullString
	FeedID      uuid.NullUUID
	PublishedAt time.Time
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.FeedID,
		arg.PublishedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.PublishedAt,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT p.id, title, description, p.url, published_at, p.feed_id, p.created_at, p.updated_at, f.id, f.user_id, name, f.url, f.created_at, f.updated_at, last_fetched_at, ff.id, ff.user_id, ff.feed_id, ff.created_at, ff.updated_at
FROM Posts as P
INNER JOIN Feeds as F ON P.feed_id = F.ID
INNER JOIN Feed_Follows FF ON FF.feed_id = F.ID
WHERE FF.user_id = $1
ORDER BY P.published_at DESC
LIMIT $2
`

type GetPostsForUserParams struct {
	UserID uuid.NullUUID
	Limit  int32
}

type GetPostsForUserRow struct {
	ID            uuid.UUID
	Title         sql.NullString
	Description   sql.NullString
	Url           sql.NullString
	PublishedAt   time.Time
	FeedID        uuid.NullUUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ID_2          uuid.UUID
	UserID        uuid.NullUUID
	Name          string
	Url_2         string
	CreatedAt_2   time.Time
	UpdatedAt_2   time.Time
	LastFetchedAt sql.NullTime
	ID_3          uuid.UUID
	UserID_2      uuid.NullUUID
	FeedID_2      uuid.NullUUID
	CreatedAt_3   time.Time
	UpdatedAt_3   time.Time
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.PublishedAt,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.UserID,
			&i.Name,
			&i.Url_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.LastFetchedAt,
			&i.ID_3,
			&i.UserID_2,
			&i.FeedID_2,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
